
class ProjectVersion {
	//主版本号
	Integer major
	
	//副版本号
	Integer minor
	
	//是否正式版
	Boolean release

	ProjectVersion (Integer major, Integer minor){
		this.major = major
		this.minor = minor
		this.release = Boolean.FALSE
	}

	ProjectVersion (Integer major, Integer minor, Boolean release){
		this.major = major
		this.minor = minor
		this.release = release
	}

	@Override
	String toString () {
		"$major.$minor${release ? '': '-SNAPSHOT'}"
	}

}



//编写一个task配置

//读取配置文件
ext.versionFile = file('version.properties')

task loadVersion {
	project.version = readVersion()
}

ProjectVersion readVersion() {

	logger.quiet 'reading the version file'

	if (!versionFile.exists()) {
		
		throw new GradleException("Required version file does not exist : $versionFile.canonicalPath")
	}
	Properties versionProps = new Properties()

	versionFile.withInputStream { stream ->
		versionProps.load(stream)
	}

	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

// 自定义Task的实现
class ReleaseVersionTask extends DefaultTask {

	//通过注解声明输入输出
	@Input Boolean release
	@OutputFile File destFile

	//构造方法
	ReleaseVersionTask(){
		group= 'versioning'
		description = 'Make Project a Release Version!'
	}

	void start() {
		
		version.release = true
		//Ant propertyfile 提供了一种便利的方式来修改属性文件
		ant.propertyfile (file : versionFile) {
			entry(key: 'release', type: 'string', operation : '=', value :'true')
		}

	}
}

task makeReleaseVersion (type : ReleaseVersionTask){

	release= version.release
	destFile= versionFile

}

/*
//声明Task用来递增版本类别
//主版本
task incrementMajorVersion{

	group= 'versioning'
	description= 'increment project Major Version.'

	doLast {

		String currentVersion = version.toString()

		++version.major

		String newVersion = version.toString()

		logger.info "increment project Major Version: $currentVersion -> $newVersion."

		ant.propertyfile(file: versionFile){
			entry(key: 'major', type:'int', operation: '+' , value: 1)
		}  
	}
}

//副版本
task incrementMinorVersion{

	group = 'versioning'
	description = 'increment project Minor Version.'

	doLast {

		String currentVersion = version.toString()

		++version.minor

		String newVersion = version.toString()

		logger.info "increment project Minor Version: $currentVersion -> $newVersion."

		ant.propertyfile(file: versionFile){
			entry(key: 'minor', type:'int', operation: '+', value: 1)
		}  
	}
}
*/

//将二者逻辑合并，写出通用的升级方法
task.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier."){

	String taskName -> if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
		
		task(taskName) << {

			String classifier = (taskName - 'increment' - 'Version').toLowerCase()

			String currentVersion = version.toString()

			switch(classifier) {
				case 'major': 
					++ version.major
				break
				
				case 'minor':
					++ version.minor
				break
					
				default: throw new GradleException("Invalid version type $classifier. Allowed type:['Major','Minor']")

				String newVersion = version.toString()

				logger.info "increment project Minor Version: $currentVersion -> $newVersion."

				ant.propertyfile(file: versionFile){
					entry(key: 'minor', type:'int', operation: '+', value: 1)
				}  
			}
		}
	}
}
